Unions are conceptually similar to Structures. The only difference between them is memory allocation. Structure allocates storage space for all its members separately; Whereas, Union allocates one common storage space for all its members. Members of a union can only be accessed one at a time. The union data type was invented to prevent memory fragmentation. The union data type prevents fragmentation by creating a standard size of certain data everything else remains same as Structures

In C, typedef is used to give an existing type an alias or a new name.

HOW TO INPUT INTO OUR data

    HexWord word;
    // Initialize the word with hexadecimal values (example: 0x1A2B3C4D)
    word.bytes[0].byte = 0x1A;
    word.bytes[1].byte = 0x2B;
    word.bytes[2].byte = 0x3C;
    word.bytes[3].byte = 0x4D;

    // Print the hexadecimal word
    printHexWord(word);

    Inside ParseHexWords

    printf("%c\t%c\n", lowNibble, highNibble);
    printf("%X\t%X\n", hexCharToByte(lowNibble), hexCharToByte(highNibble));

    XOR Defn.

    HexWord XOR(const HexWord A, const HexWord B){
    HexWord temp;
    temp.bytes[0].byte = A.bytes[0].byte ^ B.bytes[0].byte;
    temp.bytes[1].byte = A.bytes[1].byte ^ B.bytes[1].byte;
    temp.bytes[2].byte = A.bytes[2].byte ^ B.bytes[2].byte;
    temp.bytes[3].byte = A.bytes[3].byte ^ B.bytes[3].byte;
    return temp;
}

    HexWord temp = XOR(rowKeyArray[2],rowKeyArray[3]);
    printHexWord(temp);

    Example 
    ABF71588
    09CF4F3C
    A2385AB4

    //Right Rotate Once
HexWord Rotate(const HexWord A){
    HexWord temp;
    temp.bytes[3].byte = A.bytes[0].byte;
    temp.bytes[0].byte = A.bytes[1].byte;
    temp.bytes[1].byte = A.bytes[2].byte;
    temp.bytes[2].byte = A.bytes[3].byte;
    return temp;
}

printHexWord(Rotate(rowKeyArray[3]));