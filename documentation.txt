Unions are conceptually similar to Structures. The only difference between them is memory allocation. Structure allocates storage space for all its members separately; Whereas, Union allocates one common storage space for all its members. Members of a union can only be accessed one at a time. The union data type was invented to prevent memory fragmentation. The union data type prevents fragmentation by creating a standard size of certain data everything else remains same as Structures

In C, typedef is used to give an existing type an alias or a new name.

HOW TO INPUT INTO OUR data

    HexWord word;
    // Initialize the word with hexadecimal values (example: 0x1A2B3C4D)
    word.bytes[0].byte = 0x1A;
    word.bytes[1].byte = 0x2B;
    word.bytes[2].byte = 0x3C;
    word.bytes[3].byte = 0x4D;

    // Print the hexadecimal word
    printHexWord(word);

    Inside ParseHexWords

    printf("%c\t%c\n", lowNibble, highNibble);
    printf("%X\t%X\n", hexCharToByte(lowNibble), hexCharToByte(highNibble));

    XOR Defn.

    HexWord XOR(const HexWord A, const HexWord B){
    HexWord temp;
    temp.bytes[0].byte = A.bytes[0].byte ^ B.bytes[0].byte;
    temp.bytes[1].byte = A.bytes[1].byte ^ B.bytes[1].byte;
    temp.bytes[2].byte = A.bytes[2].byte ^ B.bytes[2].byte;
    temp.bytes[3].byte = A.bytes[3].byte ^ B.bytes[3].byte;
    return temp;
}

    HexWord temp = XOR(rowKeyArray[2],rowKeyArray[3]);
    printHexWord(temp);

    Example 
    ABF71588
    09CF4F3C
    A2385AB4

    //Right Rotate Once
HexWord Rotate(const HexWord A){
    HexWord temp;
    temp.bytes[3].byte = A.bytes[0].byte;
    temp.bytes[0].byte = A.bytes[1].byte;
    temp.bytes[1].byte = A.bytes[2].byte;
    temp.bytes[2].byte = A.bytes[3].byte;
    return temp;
}

printHexWord(Rotate(rowKeyArray[3]));

SBOX
static volatile const unsigned char sBox[] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

Typecasting required for traversing in Array

int pa = ((int)0xf)*4;
    printf("%d", pa);

    Another Problem with Little Endienness

    HexWord SubWord(const HexWord A){
    HexWord temp;
    temp.bytes[0].byte = sBox[((int)A.bytes[0].nibbles.high) * 16 + ((int)A.bytes[0].nibbles.low)];
    temp.bytes[1].byte = sBox[((int)A.bytes[1].nibbles.high) * 16 + ((int)A.bytes[1].nibbles.low)];
    temp.bytes[2].byte = sBox[((int)A.bytes[2].nibbles.high) * 16 + ((int)A.bytes[2].nibbles.low)];
    temp.bytes[3].byte = sBox[((int)A.bytes[3].nibbles.high) * 16 + ((int)A.bytes[3].nibbles.low)];
    return temp;
}

printHexWord(SubWord(rowKeyArray[3]));

09CF4F3C
10A848BE

But it Should be
09CF4F3C
018A84EB

Finally 

After Swapping nibbles

// Done because of Endienness
unsigned char swapNibbles(unsigned char byte) {
    return ((byte & 0x0F) << 4) | ((byte & 0xF0) >> 4);
}

// To Perform Substitution
HexWord SubWord(const HexWord A){
    // Check this about Little-Endienness
    HexWord temp;
    temp.bytes[0].byte = swapNibbles(sBox[((int)A.bytes[0].nibbles.high) * 16 + ((int)A.bytes[0].nibbles.low)]);
    temp.bytes[1].byte = swapNibbles(sBox[((int)A.bytes[1].nibbles.high) * 16 + ((int)A.bytes[1].nibbles.low)]);
    temp.bytes[2].byte = swapNibbles(sBox[((int)A.bytes[2].nibbles.high) * 16 + ((int)A.bytes[2].nibbles.low)]);
    temp.bytes[3].byte = swapNibbles(sBox[((int)A.bytes[3].nibbles.high) * 16 + ((int)A.bytes[3].nibbles.low)]);
    return temp;
}

018A84EB


HexWord Rcon(unsigned char k){
    unsigned char RCONST[11] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36};
    HexWord temp;
    temp.bytes[0].byte = RCONST[k];
    temp.bytes[1].byte = 0x00;
    temp.bytes[2].byte = 0x00;
    temp.bytes[3].byte = 0x00;
    return temp;
}

printHexWord(Rcon(3));

40000000

so Little Endienness was needed

// Done because of Endienness
unsigned char swapNibbles(unsigned char byte) {
    return ((byte & 0x0F) << 4) | ((byte & 0xF0) >> 4);
}

HexWord Rcon(unsigned char k){
    unsigned char RCONST[11] = {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36};
    HexWord temp;
    temp.bytes[0].byte = swapNibbles(RCONST[k]); // Little-Endienness
    temp.bytes[1].byte = 0x00;
    temp.bytes[2].byte = 0x00;
    temp.bytes[3].byte = 0x00;
    return temp;
}

04000000

Round 0 :: 2B7E1516
Round 1 :: 28AED2A6
Round 2 :: ABF71588
Round 3 :: 09CF4F3C
Round 4 :: A0FAFE17
Round 5 :: 88542CB1
Round 6 :: 23A33939
Round 7 :: 2A6C7605
Round 8 :: F2C295F2
Round 9 :: 7A96B943
Round 10 :: 5935807A
Round 11 :: 7359F67F
Round 12 :: 3D80477D
Round 13 :: 4716FE3E
Round 14 :: 1E237E44
Round 15 :: 6D7A883B
Round 16 :: EF44A541
Round 17 :: A8525B7F
Round 18 :: B671253B
Round 19 :: DB0BAD00
Round 20 :: D4D1C6F8
Round 21 :: 7C839D87
Round 22 :: CAF2B8BC
Round 23 :: 11F915BC
Round 24 :: 6D88A37A
Round 25 :: 110B3EFD
Round 26 :: DBF98641
Round 27 :: CA0093FD
Round 28 :: 4E54F70E
Round 29 :: 5F5FC9F3
Round 30 :: 84A64FB2
Round 31 :: 4EA6DC4F
Round 32 :: EAD27321
Round 33 :: B58DBAD2
Round 34 :: 312BF560
Round 35 :: 7F8D292F
Round 36 :: AC7766F3
Round 37 :: 19FADC21
Round 38 :: 28D12941
Round 39 :: 575C006E
Round 40 :: D014F9A8
Round 41 :: C9EE2589
Round 42 :: E13F0CC8
Round 43 :: B6630CA6


SUBWords running 

void subBytes(const HexWord *inWord, HexWord *temp){
    temp[0] = SubWord(inWord[0]);
    temp[1] = SubWord(inWord[1]);
    temp[2] = SubWord(inWord[2]);
    temp[3] = SubWord(inWord[3]);
}

HexWord temp1[4];
    subBytes(input,input);
    
    // Print the Parsed Words
    for (unsigned char i = 0; i < 4; i++) {
        printHexWord(temp1[i]);
    }

    Why Swap Nibble is not working here ??

    void shiftRows(const HexWord *inWord, HexWord *temp){
    unsigned char tempHex1, tempHex2, tempHex3;

    temp[0].bytes[0].byte = inWord[0].bytes[0].byte;
    temp[1].bytes[0].byte = inWord[1].bytes[0].byte;
    temp[2].bytes[0].byte = inWord[2].bytes[0].byte;
    temp[3].bytes[0].byte = inWord[3].bytes[0].byte;

    tempHex1 = inWord[0].bytes[1].byte;
    temp[0].bytes[1].byte = (inWord[1].bytes[1].byte);
    temp[1].bytes[1].byte = (inWord[2].bytes[1].byte);
    temp[2].bytes[1].byte = (inWord[3].bytes[1].byte);
    temp[3].bytes[1].byte = (tempHex1);
    // temp[0].bytes[1].byte = swapNibbles(inWord[1].bytes[1].byte);
    // temp[1].bytes[1].byte = swapNibbles(inWord[2].bytes[1].byte);
    // temp[2].bytes[1].byte = swapNibbles(inWord[3].bytes[1].byte);
    // temp[3].bytes[1].byte = swapNibbles(tempHex1);
    // printf("%X", tempHex1);
    // printf("%X", temp[0].bytes[1].byte);
    // printf("%X%X", tempHex1.nibbles.high, tempHex1.nibbles.low);

    tempHex1 = inWord[0].bytes[2].byte;
    tempHex2 = inWord[1].bytes[2].byte;
    temp[0].bytes[2].byte = (inWord[2].bytes[2].byte);
    temp[1].bytes[2].byte = (inWord[3].bytes[2].byte);
    temp[2].bytes[2].byte = (tempHex1);
    temp[3].bytes[2].byte = (tempHex2);
    // temp[0].bytes[2].byte = swapNibbles(inWord[2].bytes[2].byte);
    // temp[1].bytes[2].byte = swapNibbles(inWord[3].bytes[2].byte);
    // temp[2].bytes[2].byte = swapNibbles(tempHex1);
    // temp[3].bytes[2].byte = swapNibbles(tempHex2);

    tempHex1 = inWord[0].bytes[3].byte;
    tempHex2 = inWord[1].bytes[3].byte;
    tempHex3 = inWord[2].bytes[3].byte;
    temp[0].bytes[3].byte = (inWord[3].bytes[3].byte);
    temp[1].bytes[3].byte = (tempHex1);
    temp[2].bytes[3].byte = (tempHex2);
    temp[3].bytes[3].byte = (tempHex3);
    // temp[0].bytes[3].byte = swapNibbles(inWord[3].bytes[3].byte);
    // temp[1].bytes[3].byte = swapNibbles(tempHex1);
    // temp[2].bytes[3].byte = swapNibbles(tempHex2);
    // temp[3].bytes[3].byte = swapNibbles(tempHex3);

    // HexWord ARGHA;
    // ARGHA.bytes[0].byte = swapNibbles(temp[0].bytes[3].byte);
    // ARGHA.bytes[1].byte = swapNibbles(temp[1].bytes[3].byte);
    // ARGHA.bytes[2].byte = swapNibbles(temp[2].bytes[3].byte);
    // ARGHA.bytes[3].byte = swapNibbles(temp[3].bytes[3].byte);
    // printHexWord(ARGHA);

     HexWord temp1[4];
    shitRows(input,temp1);
    // subBytes(input,input);      // Do Like This !!
